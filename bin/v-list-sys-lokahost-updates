#!/bin/bash
# info: list system updates
# options: [FORMAT]
#
# example: v-list-sys-lokahost-updates
#
# This function checks available updates for lokahost packages.

#----------------------------------------------------------#
#                Variables & Functions                     #
#----------------------------------------------------------#

# Argument definition
format=${1-shell}

# Includes
# shellcheck source=/etc/lokahost/lokahost.conf
source /etc/lokahost/lokahost.conf
# shellcheck source=/usr/local/lokahost/func/main.sh
source $LOKAHOST/func/main.sh
# load config file
source_conf "$LOKAHOST/conf/lokahost.conf"

fields="\$NAME \$VERSION \$ARCH \$UPDATED \$DESCR \$TIME \$DATE"

# Check details of installed .deb package function
check_installed_deb() {
	dpkg_data=$(dpkg-query -s $1)
	pkg_date=$(stat -c "%Y" /var/lib/dpkg/info/$1.list)
	ARCH=$(echo "$dpkg_data" | grep Architecture | cut -f 2 -d ' ')
	VERSION=$(echo "$dpkg_data" | grep ^Version | cut -f 2 -d ' ')
	DATE=$(date -d @$pkg_date +"%F")
	TIME=$(date -d @$pkg_date +"%T")
}

# Check details of installed .rpm package function
check_installed_rpm() {
	rpm_data=$(rpm -qi $1)
	ARCH=$(echo "$rpm_data" | grep Architecture | cut -f 2 -d ' ')
	VERSION=$(echo "$rpm_data" | grep Version | cut -f 2 -d ':' | xargs)
	DATE=$(echo "$rpm_data" | grep "Build Date" | awk '{print $5 " " $6 " " $7}')
	TIME=$(echo "$rpm_data" | grep "Build Date" | awk '{print $8 " " $9 " " $10}')
}

# JSON list function
json_list() {
	IFS=$'\n'
	i=1
	objects=$(echo -e "$data" | grep NAME | wc -l)
	echo "{"
	for str in $(echo -e "$data"); do
		parse_object_kv_list "$str"
		echo -n '    "'$NAME'": {
        "VERSION": "'$VERSION'",
        "ARCH": "'$ARCH'",
        "UPDATED": "'$UPDATED'",
        "DESCR": "'$DESCR'",
        "TIME": "'$TIME'",
        "DATE": "'$DATE'"
    }'
		if [ "$i" -lt "$objects" ]; then
			echo ','
		else
			echo
		fi
		((i++))
	done
	echo '}'
}

# SHELL list function
shell_list() {
	IFS=$'\n'
	echo "PKG   VER   ARCH   UPDT   DATE"
	echo "---   ---   ----   ----   ----"
	for str in $(echo -e "$data"); do
		parse_object_kv_list "$str"
		echo "$NAME $VERSION $ARCH $UPDATED $DATE"
	done
}

#----------------------------------------------------------#
#                       Action                             #
#----------------------------------------------------------#

# Checking official latest version
if [ -f '/etc/redhat-release' ]; then
	lokahost_v=$(dnf list lokahost | grep lokahost | awk '{print $2}' | cut -f 1 -d '-')
	nginx_v=$(dnf list lokahost-nginx | grep lokahost-nginx | awk '{print $2}' | cut -f 1 -d '-')
	php_v=$(dnf list lokahost-php | grep lokahost-php | awk '{print $2}' | cut -f 1 -d '-')
else
	lokahost_v=$(apt-cache policy lokahost | grep Candidate | cut -d ':' -f 2 | xargs)
	nginx_v=$(apt-cache policy lokahost-nginx | grep Candidate | cut -d ':' -f 2 | xargs)
	php_v=$(apt-cache policy lokahost-php | grep Candidate | cut -d ':' -f 2 | xargs)
fi

# Checking installed lokahost version
if [ -f '/etc/redhat-release' ]; then
	check_installed_rpm lokahost
else
	check_installed_deb lokahost
fi

UPDATED='yes'
if [ -n "$lokahost_v" ] && [ "$lokahost_v" \> "$VERSION" ]; then
	UPDATED='no'
fi

data="NAME='lokahost' VERSION='$VERSION' ARCH='$ARCH'"
data="$data UPDATED='$UPDATED' DESCR='Lokahost core package' TIME='$TIME' DATE='$DATE'"

# Checking installed lokahost-php version
if [ -f '/etc/redhat-release' ]; then
	check_installed_rpm lokahost-php
else
	check_installed_deb lokahost-php
fi

UPDATED='yes'
if [ -n "$php_v" ] && [ "$php_v" \> "$VERSION" ]; then
	UPDATED='no'
fi

data="$data\nNAME='lokahost-php' VERSION='$VERSION'"
data="$data ARCH='$ARCH' UPDATED='$UPDATED' DESCR='Lokahost internal php interpreter'"
data="$data TIME='$TIME' DATE='$DATE'"

# Checking installed lokahost-nginx version
if [ -f '/etc/redhat-release' ]; then
	check_installed_rpm lokahost-nginx
else
	check_installed_deb lokahost-nginx
fi

UPDATED='yes'
if [ -n "$nginx_v" ] && [ "$nginx_v" \> "$VERSION" ]; then
	UPDATED='no'
fi

data="$data\nNAME='lokahost-nginx' VERSION='$VERSION'"
data="$data ARCH='$ARCH' UPDATED='$UPDATED' DESCR='Lokahost internal web server'"
data="$data TIME='$TIME' DATE='$DATE'"

# Listing data
case $format in
	json) json_list ;;
	plain) plain_list ;;
	csv) csv_list ;;
	shell) shell_list | column -t ;;
esac

#----------------------------------------------------------#
#                       Lokahost                             #
#----------------------------------------------------------#

exit
